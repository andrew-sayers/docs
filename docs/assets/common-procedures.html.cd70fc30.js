import{_ as a,r as s,o as l,a as r,b as e,d as t,w as c,F as d,e as n,c as h}from"./app.6b4780df.js";const u={},p=e("h1",{id:"common-procedures",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#common-procedures","aria-hidden":"true"},"#"),n(" Common procedures")],-1),_=e("p",null,"Some jobs need to be done frequently, and involve a detailed procedure that hasn't been automated for whatever reason. This page contains step-by-step instructions to do those jobs.",-1),m=e("h2",{id:"run-a-planned-maintenance",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#run-a-planned-maintenance","aria-hidden":"true"},"#"),n(" Run a planned maintenance")],-1),b={href:"https://github.com/sleepdiary/internal-tools/issues/new?assignees=&labels=planned-maintenance&template=planned-maintenance.md&title=Planned+maintenance%3A+TODO%3A+purpose+of+this+maintenance",target:"_blank",rel:"noopener noreferrer"},f=n("Create a new maintenance issue"),g=n(" and follow the steps described in the template."),y=h('<h2 id="fix-a-built-branch" tabindex="-1"><a class="header-anchor" href="#fix-a-built-branch" aria-hidden="true">#</a> Fix a <code>built</code> branch</h2><p>When you have a merge failure in the <code>built</code> branch, see if you can fix it with a guard line. If so, use the following procedure:</p><ol><li>create a PR in the <code>main</code> branch that adds a guard line but <em>does not</em> include the conflicting PR</li><li>merge the guard line into the <code>built</code> branch</li><li>rebase the conflicting PR on top of the new <code>main</code> branch</li><li>accept the (no longer conflicting) PR</li></ol><p>If you can resolve a merge conflict with the procedure above, there&#39;s no need to schedule a planned maintenance. Otherwise:</p>',4),k=e("li",null,[n("create a new PR that merges the existing PR into the "),e("code",null,"built"),n(" branch")],-1),v=e("li",null,"test both thoroughly in a personal repo",-1),w=n("once everything works, "),x={href:"https://github.com/sleepdiary/internal-tools/issues/new?assignees=&labels=planned-maintenance&template=planned-maintenance.md&title=Planned+maintenance%3A+Fix+the+built+branch",target:"_blank",rel:"noopener noreferrer"},P=n("create a new planned maintenance issue"),R=n(" with steps like: "),T=e("ol",null,[e("li",null,[n("merge the "),e("code",null,"built"),n(" PR into main first")]),e("li",null,"then merge the conflicting PR"),e("li",null,[n("check the normal workflow merges back correctly "),e("ul",null,[e("li",null,[n("it will fail if you merged the "),e("code",null,"built"),n(" PR after the original PR")])])])],-1),A=e("h2",{id:"update-dependency-versions",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#update-dependency-versions","aria-hidden":"true"},"#"),n(" Update dependency versions")],-1),q=e("p",null,"To keep the build system as standard as possible, all dependencies need to be cached in the build image. That means that when you update the dependencies of a package, you need to update the build system as well. This can cause hard-to-test problems, because commands occasionally succeed on the dev-server but fail in production due to some quirk of GitHub Actions configuration. To minimise that risk, use the following procedure:",-1),C=n("run "),I={href:"https://github.com/sleepdiary/internal-tools/blob/main/bin/upgrade-dependencies.sh",target:"_blank",rel:"noopener noreferrer"},F=e("code",null,"upgrade-dependencies.sh",-1),L=e("ul",null,[e("li",null,"this script has yet to be tested in a live environment - read through it and look for bugs first"),e("li",null,"this will create several pull requests that will be used in later steps")],-1),N=e("li",null,[n("accept the pull request for "),e("code",null,"internal-tools"),n(" (guaranteed to run last in the script above)")],-1),V=n("wait for "),j={href:"https://github.com/sleepdiary/internal-tools/actions/workflows/main.yml",target:"_blank",rel:"noopener noreferrer"},B=n("the relevant action"),E=n(" to build "),O=e("code",null,"pre-release",-1),G=n(" versions of the build system and dev-server"),H=n("check the new dev-server works as expected "),S=n("run "),U={href:"https://github.com/sleepdiary/internal-tools/blob/main/bin/check-dev-server.sh",target:"_blank",rel:"noopener noreferrer"},W=e("code",null,"check-dev-server.sh",-1),D=n(" once to check everything"),z=n("push a test-commit for every repository that uses the build system "),J=n("run "),K={href:"https://github.com/sleepdiary/internal-tools/blob/main/bin/check-prerelease-build-system.sh",target:"_blank",rel:"noopener noreferrer"},M=e("code",null,"check-prerelease-build-system.sh",-1),Q=n(" once in each repository that was updated"),X={href:"https://github.com/sleepdiary/internal-tools/compare/latest...main?expand=1",target:"_blank",rel:"noopener noreferrer"},Y=n("create an "),Z=e("code",null,"internal-tools",-1),$=n(" PR to pull into latest from main"),ee=n(' with message "Recent changes"'),ne={href:"https://github.com/sleepdiary/internal-tools/issues/new?assignees=&labels=planned-maintenance&template=planned-maintenance.md&title=Planned+maintenance%3A+Update+dependencies+for+every+repository",target:"_blank",rel:"noopener noreferrer"},te=n("Run a planned maintenance"),oe=n(" to accept all the PRs generated above "),se={href:"https://github.com/sleepdiary/internal-tools/issues?q=label%3Aplanned-maintenance",target:"_blank",rel:"noopener noreferrer"},ie=n("see previous planned maintenances"),ae=n("add the PRs above to "),le={href:"https://github.com/sleepdiary/planned-maintenance-info/edit/main/index.js",target:"_blank",rel:"noopener noreferrer"},re=n("the maintenace actions"),ce=e("h2",{id:"create-a-new-repository",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#create-a-new-repository","aria-hidden":"true"},"#"),n(" Create a new repository")],-1),de=e("li",null,"make a personal repository that will be the basis for the new repository",-1),he=e("li",null,[n("create a minimum viable product "),e("ul",null,[e("li",null,"push any commits"),e("li",null,"add repository metadata"),e("li",null,"configure GitHub Pages")])],-1),ue=e("li",null,[n("check everything looks right "),e("ul",null,[e("li",null,"remove any branches that shouldn't go in the main repository"),e("li",null,'make sure all the branch histories look nice (e.g. remove "fixup" and "WIP" commits)')])],-1),pe={href:"https://docs.github.com/en/repositories/creating-and-managing-repositories/transferring-a-repository",target:"_blank",rel:"noopener noreferrer"},_e=n("transfer the repository to sleepdiary"),me=e("li",null,"fork a new personal repo from the moved repository",-1),be=n("edit your "),fe=e("code",null,".gitconfig",-1);function ge(ye,ke){const o=s("ExternalLinkIcon"),i=s("RouterLink");return l(),r(d,null,[p,_,m,e("p",null,[e("a",b,[f,t(o)]),g]),y,e("ol",null,[k,v,e("li",null,[w,e("a",x,[P,t(o)]),R,T])]),A,q,e("ol",null,[e("li",null,[C,e("a",I,[F,t(o)]),L]),N,e("li",null,[V,e("a",j,[B,t(o)]),E,O,G]),e("li",null,[H,e("ul",null,[e("li",null,[S,e("a",U,[W,t(o)]),D])])]),e("li",null,[z,e("ul",null,[e("li",null,[J,e("a",K,[M,t(o)]),Q])])]),e("li",null,[e("a",X,[Y,Z,$,t(o)]),ee]),e("li",null,[e("a",ne,[te,t(o)]),oe,e("ul",null,[e("li",null,[e("a",se,[ie,t(o)])]),e("li",null,[ae,e("a",le,[re,t(o)])])])])]),ce,e("ol",null,[de,he,ue,e("li",null,[e("a",pe,[_e,t(o)])]),me,e("li",null,[t(i,{to:"/contribute/optimise-your-environment.html#git-repositories"},{default:c(()=>[be,fe]),_:1})])])],64)}var we=a(u,[["render",ge]]);export{we as default};
