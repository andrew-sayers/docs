import{_ as o,r as i,o as l,a as r,b as e,d as a,F as c,c as s,e as n}from"./app.f2d0cf96.js";const d={},h=s('<h1 id="minimise-planned-maintenance" tabindex="-1"><a class="header-anchor" href="#minimise-planned-maintenance" aria-hidden="true">#</a> Minimise planned maintenance</h1><p>Planned maintenance is a window where we can make updates to the project that have a reasonable chance of causing problems for users or developers. For example, breaking the dashboard or causing GitHub actions to fail.</p><p>This page discusses ways to avoid planned maintenance, or at least reduce the amount of work that needs to be done during the maintenance window.</p><h2 id="general-guidelines" tabindex="-1"><a class="header-anchor" href="#general-guidelines" aria-hidden="true">#</a> General guidelines</h2><h3 id="test-on-a-personal-fork-when-possible" tabindex="-1"><a class="header-anchor" href="#test-on-a-personal-fork-when-possible" aria-hidden="true">#</a> Test on a personal fork when possible</h3><p>Sometimes you need to make changes to a repository that might fail. For example, GitHub actions generally can&#39;t be tested without being run on GitHub&#39;s own servers.</p>',6),u=n("Most changes can be made - or at least rehearsed - on a personal fork of the repository. Even if you need to test actions that look at the "),p=e("code",null,"main",-1),_=n(" branch, you can "),m={href:"https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History",target:"_blank",rel:"noopener noreferrer"},b=n("rewrite your fork's history"),g=n(" and rerun tests as often as you like."),f=e("h3",{id:"use-a-pre-release-label-for-live-testing",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#use-a-pre-release-label-for-live-testing","aria-hidden":"true"},"#"),n(" Use a "),e("code",null,"pre-release"),n(" label for live testing")],-1),k=n("Sometimes you need to build a package and push it to an external site. For example, you might want to build a new dev server and push an image to "),y={href:"https://hub.docker.com/u/sleepdiaryproject",target:"_blank",rel:"noopener noreferrer"},v=n("our Docker Hub site"),w=n("."),x=n("Most sites let you push pre-release versions of packages. In particular, packages that use "),P={href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"},R=n("semantic versioning"),T=n(" should use pre-release labels like "),q=e("code",null,"1.2.3-$COMMIT",-1),F=n(", while continuously-deployed packages should use a channel called "),M=e("code",null,"pre-release",-1),j=n("."),A=s(`<p>When you&#39;ve finished with the pre-release, you might be able to publish simply by relabelling it. Otherwise, you&#39;ll have to spend a little longer pushing the same binary again.</p><h3 id="use-guard-lines-to-avoid-merge-conflicts" tabindex="-1"><a class="header-anchor" href="#use-guard-lines-to-avoid-merge-conflicts" aria-hidden="true">#</a> Use guard lines to avoid merge conflicts</h3><p>Sometimes you need to manage changes that <code>git</code> can&#39;t merge automatically. For example, most repositories have a <code>.gitignore</code> file with lines in the <code>main</code> branch that are missing in the <code>built</code> branch.</p><p>Most merge conflicts can be avoided with a <em>guard line</em> for <code>git</code> to use:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;This line appears in one branch&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* this guard line appears in both branches */</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;This line appears in another branch&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Now you can modify or delete either line in either branch, and <code>git</code> will use the guard line to merge them automatically.</p><h2 id="specific-procedures" tabindex="-1"><a class="header-anchor" href="#specific-procedures" aria-hidden="true">#</a> Specific procedures</h2><h3 id="run-a-planned-maintenance" tabindex="-1"><a class="header-anchor" href="#run-a-planned-maintenance" aria-hidden="true">#</a> Run a planned maintenance</h3>`,8),G={href:"https://github.com/sleepdiary/internal-tools/issues/new?assignees=&labels=planned-maintenance&template=planned-maintenance.md&title=Planned+maintenance%3A+TODO%3A+purpose+of+this+maintenance",target:"_blank",rel:"noopener noreferrer"},H=n("Create a new maintenance issue"),I=n(" and follow the steps described in the template."),N=s('<h3 id="fix-a-built-branch" tabindex="-1"><a class="header-anchor" href="#fix-a-built-branch" aria-hidden="true">#</a> Fix a <code>built</code> branch</h3><p>When you have a merge failure in the <code>built</code> branch, see if you can fix it with a guard line. If so, use the following procedure:</p><ol><li>create a PR in the <code>main</code> branch that adds a guard line but <em>does not</em> include the conflicting PR</li><li>merge the guard line into the <code>built</code> branch</li><li>rebase the conflicting PR on top of the new <code>main</code> branch</li><li>accept the (no longer conflicting) PR</li></ol><p>If you can resolve a merge conflict with the procedure above, there&#39;s no need to schedule a planned maintenance. Otherwise:</p>',4),O=e("li",null,[n("create a new PR that merges the existing PR into the "),e("code",null,"built"),n(" branch")],-1),S=e("li",null,"test both thoroughly in a personal repo",-1),E=n("once everything works, "),U={href:"https://github.com/sleepdiary/internal-tools/issues/new?assignees=&labels=planned-maintenance&template=planned-maintenance.md&title=Planned+maintenance%3A+Fix+the+built+branch",target:"_blank",rel:"noopener noreferrer"},V=n("create a new planned maintenance issue"),B=n(" with steps like: "),C=e("ol",null,[e("li",null,[n("merge the "),e("code",null,"built"),n(" PR into main first")]),e("li",null,"then merge the conflicting PR"),e("li",null,[n("check the normal workflow merges back correctly "),e("ul",null,[e("li",null,[n("it will fail if you merged the "),e("code",null,"built"),n(" PR after the original PR")])])])],-1),D=e("h3",{id:"update-dependency-versions",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#update-dependency-versions","aria-hidden":"true"},"#"),n(" Update dependency versions")],-1),L=e("p",null,"To keep the build system as standard as possible, all dependencies need to be cached in the build image. That means that when you update the dependencies of a package, you need to update the build system as well. This can cause hard-to-test problems, because commands occasionally succeed on the dev-server but fail in production due to some quirk of GitHub Actions configuration. To minimise that risk, use the following procedure:",-1),W=n("run "),$={href:"https://github.com/sleepdiary/internal-tools/blob/main/bin/upgrade-dependencies.sh",target:"_blank",rel:"noopener noreferrer"},z=e("code",null,"upgrade-dependencies.sh",-1),J=e("ul",null,[e("li",null,"this script has yet to be tested in a live environment - read through it and look for bugs first"),e("li",null,"this will create several pull requests that will be used in later steps")],-1),K=e("li",null,[n("accept the pull request for "),e("code",null,"internal-tools"),n(" (guaranteed to run last in the script above)")],-1),Q=n("wait for "),X={href:"https://github.com/sleepdiary/internal-tools/actions/workflows/main.yml",target:"_blank",rel:"noopener noreferrer"},Y=n("the relevant action"),Z=n(" to build "),ee=e("code",null,"pre-release",-1),ne=n(" versions of the build system and dev-server"),te=n("check the new dev-server works as expected "),ae=n("run "),se={href:"https://github.com/sleepdiary/internal-tools/blob/main/bin/check-dev-server.sh",target:"_blank",rel:"noopener noreferrer"},oe=e("code",null,"check-dev-server.sh",-1),ie=n(" once to check everything"),le=n("push a test-commit for every repository that uses the build system "),re=n("run "),ce={href:"https://github.com/sleepdiary/internal-tools/blob/main/bin/check-prerelease-build-system.sh",target:"_blank",rel:"noopener noreferrer"},de=e("code",null,"check-prerelease-build-system.sh",-1),he=n(" once in each repository that was updated"),ue={href:"https://github.com/sleepdiary/internal-tools/compare/latest...main?expand=1",target:"_blank",rel:"noopener noreferrer"},pe=n("create an "),_e=e("code",null,"internal-tools",-1),me=n(" PR to pull into latest from main"),be=n(' with message "Recent changes"'),ge={href:"https://github.com/sleepdiary/internal-tools/issues/new?assignees=&labels=planned-maintenance&template=planned-maintenance.md&title=Planned+maintenance%3A+Update+dependencies+for+every+repository",target:"_blank",rel:"noopener noreferrer"},fe=n("Run a planned maintenance"),ke=n(" to accept all the PRs generated above "),ye={href:"https://github.com/sleepdiary/internal-tools/issues?q=label%3Aplanned-maintenance",target:"_blank",rel:"noopener noreferrer"},ve=n("see previous planned maintenances"),we=n("add the PRs above to "),xe={href:"https://github.com/sleepdiary/planned-maintenance-info/edit/main/index.js",target:"_blank",rel:"noopener noreferrer"},Pe=n("the maintenace actions");function Re(Te,qe){const t=i("ExternalLinkIcon");return l(),r(c,null,[h,e("p",null,[u,p,_,e("a",m,[b,a(t)]),g]),f,e("p",null,[k,e("a",y,[v,a(t)]),w]),e("p",null,[x,e("a",P,[R,a(t)]),T,q,F,M,j]),A,e("p",null,[e("a",G,[H,a(t)]),I]),N,e("ol",null,[O,S,e("li",null,[E,e("a",U,[V,a(t)]),B,C])]),D,L,e("ol",null,[e("li",null,[W,e("a",$,[z,a(t)]),J]),K,e("li",null,[Q,e("a",X,[Y,a(t)]),Z,ee,ne]),e("li",null,[te,e("ul",null,[e("li",null,[ae,e("a",se,[oe,a(t)]),ie])])]),e("li",null,[le,e("ul",null,[e("li",null,[re,e("a",ce,[de,a(t)]),he])])]),e("li",null,[e("a",ue,[pe,_e,me,a(t)]),be]),e("li",null,[e("a",ge,[fe,a(t)]),ke,e("ul",null,[e("li",null,[e("a",ye,[ve,a(t)])]),e("li",null,[we,e("a",xe,[Pe,a(t)])])])])])],64)}var Me=o(d,[["render",Re]]);export{Me as default};
