import{_ as r,r as o,o as c,a as l,b as e,d as n,w as p,F as d,e as s,c as t}from"./app.f7d8d445.js";const u={},h=e("h1",{id:"reconstruct-a-sleep-diary",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#reconstruct-a-sleep-diary","aria-hidden":"true"},"#"),s(" Reconstruct a sleep diary")],-1),m=e("p",null,"A lot of programs remember when recent events happened. For example, your calendar saves the start and end times for entries; and your browser cache stores the time you visited each page. You may be able to reconstruct a sleep diary by gathering up these records and assuming you were asleep during the periods where nothing happened.",-1),y=s("Every program that logs your activity has its own bespoke format, designed around the requirements of that program. And for privacy and security reasons, access to the data is often limited. That means reconstructing a diary is quite technical and often inaccurate, but it can be a quick way to see your past sleeping pattern. See "),k=s("the diary creation page"),b=s(" for information about creating a proper diary for future events."),_=t(`<h2 id="general-overview" tabindex="-1"><a class="header-anchor" href="#general-overview" aria-hidden="true">#</a> General overview</h2><p>To reconstruct a diary, you need to create an <em>activity log</em> that will then be converted to a normal diary. This is a simple text file that looks something like:</p><div class="language-csv ext-csv line-numbers-mode"><pre class="language-csv"><code><span class="token value">maximum_day_length_ms=129600000</span>
<span class="token value">ActivityStart</span><span class="token punctuation">,</span><span class="token value">ActivityEnd</span>
<span class="token value">2016-08-04T02:01:00Z</span><span class="token punctuation">,</span><span class="token value">2016-08-04T04:08:16Z</span>
<span class="token value">12345678</span><span class="token punctuation">,</span><span class="token value">23456789</span>
<span class="token value">... etc ...</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>The first line is optional, and tells the analysis program how many milliseconds there are in the longest possible day. A 24-hour day is <code>86400000</code> milliseconds, and you should only need to set this explicitly if your average day length is more than about 32 hours long.</p>`,4),g=s("The rest of the file uses "),f={href:"https://en.wikipedia.org/wiki/Comma-separated_values",target:"_blank",rel:"noopener noreferrer"},v=s("CSV"),w=s(" - a type of simple spreadsheet with commas between each column."),x=e("p",null,[s("The second line is the "),e("em",null,"CSV header"),s(". It says this file has two columns, indicating the start and end times for an activity.")],-1),S=s("Lines after the second are the "),T=e("em",null,"CSV body",-1),A=s(". They indicate the times for specific activities. Each line should have a start time in the first column and an end in the second column. If your data source only specifies one time, use that time in both columns. The example above shows dates in "),E={href:"https://en.wikipedia.org/wiki/ISO_8601",target:"_blank",rel:"noopener noreferrer"},q=s("ISO 8601"),I=s(" format and in "),C={href:"https://en.wikipedia.org/wiki/Unix_time",target:"_blank",rel:"noopener noreferrer"},F=s("Unix time"),L=s(", but analysis programs should support a wide variety of date formats."),$=e("p",null,"The way to generate this data depends on your data source. The examples below discuss some possible solutions, but you may need to do some programming to make your particular source work.",-1),P=s("The examples on this page use "),D={href:"https://sleepdiary.github.io/dashboard",target:"_blank",rel:"noopener noreferrer"},O=s("the dashboard"),R=s(" to analyse your data. See "),Y={href:"https://github.com/sleepdiary/core/tree/main/src/ActivityLog",target:"_blank",rel:"noopener noreferrer"},G=s("the ActivityLog documentation"),M=s(" if you're interested in creating your own analysis software."),V=e("h1",{id:"sources",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#sources","aria-hidden":"true"},"#"),s(" Sources")],-1),N=s("A collection of example sources are presented below, but your best source of logs depends on your personal behaviour. For example, if you're always on your Android phone, "),B={href:"https://support.google.com/accounts/answer/3024190?hl=en",target:"_blank",rel:"noopener noreferrer"},H=s("Google Takeout"),z=s(" will let you download a lot of data about your activity."),Q=e("h1",{id:"calendars",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#calendars","aria-hidden":"true"},"#"),s(" Calendars")],-1),U=e("p",null,"Calendars store the dates and times when events occur. If you normally have events throughout your day, you can use them as an activity log. The general process looks like this:",-1),W=e("ol",null,[e("li",null,"export your data to iCalendar format"),e("li",null,"analyse your data")],-1),Z=s("Most calendar software can export to "),j={href:"https://en.wikipedia.org/wiki/ICalendar",target:"_blank",rel:"noopener noreferrer"},J=s("iCalendar format"),K=s(" - a standard format designed to be read by other calendaring programs. You will need to search online to find the relevant steps for your program."),X=s("Once you have an iCalendar file, you can add it directly to "),ss={href:"https://sleepdiary.github.io/dashboard",target:"_blank",rel:"noopener noreferrer"},es=s("the dashboard"),ns=s(". It will convert the file to an activity log automatically."),as=t('<h2 id="desktop-browsers" tabindex="-1"><a class="header-anchor" href="#desktop-browsers" aria-hidden="true">#</a> Desktop browsers</h2><p>Browsers store the date and time whenever you go to a new page, so they can decide when to remove that page from the browser cache. Depending on your settings, this information might be deleted after a month or so. Most browsers store this in a standard format that can be extracted with a little work. The general process looks like this:</p><ol><li>find your history database</li><li>(optionally) extract the cache activity</li><li>analyse your data</li></ol><p>The first step is to find your history database. Type <code>chrome:version</code> or <code>about:support</code> in the address bar - depending on your browser, one or other of them should take you to a page full of technical information. The line that says <code>Profile Path</code> or <code>Profile Directory</code> tells you the folder where your profile is saved. Depending on your browser, your history database will be called <code>History</code>, <code>History.db</code> or <code>places.sqlite</code> in that folder. If you are using MacOS and can&#39;t see your profile folder, press <code>Cmd</code> + <code>Shift</code> + <code>G</code> in the Finder and type your folder name.</p>',4),ts={href:"https://sleepdiary.github.io/dashboard",target:"_blank",rel:"noopener noreferrer"},os=s("The dashboard"),is=s(" can create an activity log directly from your history database. You can skip the next stage if you're comfortable with that."),rs=e("h3",{id:"manually-create-an-activity-log-optional",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#manually-create-an-activity-log-optional","aria-hidden":"true"},"#"),s(" Manually create an activity log (optional)")],-1),cs=s("If you would rather not upload your complete browser history to "),ls={href:"https://sleepdiary.github.io/dashboard",target:"_blank",rel:"noopener noreferrer"},ps=s("the dashboard"),ds=s(", you can extract your activity log by hand with a command-line program called "),us={href:"https://www.sqlite.org/download.html",target:"_blank",rel:"noopener noreferrer"},hs=s("SQLite"),ms=s(". This is installed by default in MacOS and available for all Linux distributions, but you will have to install it manually if you use Windows. Once you've installed SQLite, run one of these commands on a command-line (remember to replace "),ys=e("code",null,"...",-1),ks=s(" with the folder from the first step):"),bs=t(`<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Run whichever command matches your history filename:</span>
sqlite3 -csv C:<span class="token punctuation">\\</span><span class="token punctuation">\\</span><span class="token punctuation">..</span>.<span class="token punctuation">\\</span><span class="token punctuation">\\</span>History       <span class="token string">&#39;.output activity-log.chrome.csv&#39;</span>  <span class="token string">&#39;.header on&#39;</span> <span class="token string">&#39;SELECT visit_time/1000-11644473600000 AS ActivityStart, visit_time/1000-11644473600000 AS ActivityEnd FROM visits&#39;</span>
sqlite3 -csv C:<span class="token punctuation">\\</span><span class="token punctuation">\\</span><span class="token punctuation">..</span>.<span class="token punctuation">\\</span><span class="token punctuation">\\</span>places.sqlite <span class="token string">&#39;.output activity-log.firefox.csv&#39;</span> <span class="token string">&#39;.header on&#39;</span> <span class="token string">&#39;SELECT visit_date/1000                AS ActivityStart, visit_date/1000                AS ActivityEnd FROM moz_historyvisits&#39;</span>
sqlite3 -csv C:<span class="token punctuation">\\</span><span class="token punctuation">\\</span><span class="token punctuation">..</span>.<span class="token punctuation">\\</span><span class="token punctuation">\\</span>History.db    <span class="token string">&#39;.output activity-log.safari.csv&#39;</span>  <span class="token string">&#39;.header on&#39;</span> <span class="token string">&#39;SELECT (visit_time+978307200)*1000    AS ActivityStart, (visit_time+978307200)*1000    AS ActivityEnd FROM history_visits&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>If you see a message like <code>Error: database is locked</code>, you will need to close your browser before you run the command.</p><p>Depending on your browser, your file will be called <code>activity-log.chrome.csv</code>, <code>activity-log.firefox.csv</code> or <code>activity-log.safari.csv</code>. You can confirm its contents by opening it like a normal spreadsheet.</p>`,3),_s=s("Finally, add your activity log or history database to "),gs={href:"https://sleepdiary.github.io/dashboard",target:"_blank",rel:"noopener noreferrer"},fs=s("the dashboard"),vs=s(". You might like to convert the result to a spreadsheet, so you can fix anything it got wrong."),ws=t(`<h2 id="desktop-operating-systems" tabindex="-1"><a class="header-anchor" href="#desktop-operating-systems" aria-hidden="true">#</a> Desktop operating systems</h2><p>Your operating system logs a lot of system information, like when it boots up and shuts down. If you turn your computer on when you wake up and off when you go to sleep, you can use that information as an activity log. The general process looks like this:</p><ol><li>run a command-line program to create an activity log</li><li>analyse your data</li></ol><p>If you use Windows, you can create an activity log with PowerShell. Click <code>Start</code>, type <code>PowerShell</code> and press enter. Copy the following block of text, then right-click on the PowerShell window and click <code>paste</code>:</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$out_path</span> = <span class="token namespace">[System.Environment]</span>::GetFolderPath<span class="token punctuation">(</span><span class="token namespace">[System.Environment+SpecialFolder]</span>::Desktop<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;\\\\activity-log.windows.csv&quot;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">write</span> <span class="token string">&quot;Saving to <span class="token variable">$out_path</span>...&quot;</span>
  <span class="token function">write</span> <span class="token string">&quot;ActivityStart,ActivityEnd&quot;</span> <span class="token punctuation">|</span> <span class="token function">Out-File</span> <span class="token operator">-</span>encoding ASCII <span class="token operator">-</span>FilePath <span class="token variable">$out_path</span>
  <span class="token keyword">ForEach</span> <span class="token punctuation">(</span> <span class="token variable">$log</span> in <span class="token function">Get-EventLog</span> System <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$log</span><span class="token punctuation">.</span>EventId <span class="token operator">-eq</span> 12 <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment"># powered on</span>
       <span class="token variable">$start_time</span> = <span class="token function">Get-Date</span> <span class="token operator">-</span>Format u <span class="token variable">$log</span><span class="token punctuation">.</span>TimeGenerated
    <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span> <span class="token variable">$log</span><span class="token punctuation">.</span>EventId <span class="token operator">-eq</span> 13 <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment"># powered off</span>
       <span class="token variable">$end_time</span> = <span class="token function">Get-Date</span> <span class="token operator">-</span>Format u <span class="token variable">$log</span><span class="token punctuation">.</span>TimeGenerated
       <span class="token function">write</span> <span class="token string">&quot;<span class="token variable">$start_time</span>,<span class="token variable">$end_time</span>&quot;</span> <span class="token punctuation">|</span> <span class="token function">Out-File</span> <span class="token operator">-</span>encoding ASCII <span class="token operator">-</span>append <span class="token operator">-</span>FilePath <span class="token variable">$out_path</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">write</span> <span class="token string">&quot;You can close PowerShell now.&quot;</span>
<span class="token punctuation">}</span>
<span class="token comment"># Now press enter twice</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>Press enter twice to run the command. After a few seconds, a file called <code>activity-log.windows.csv</code> will appear on your desktop. You can close PowerShell once that happens.</p><p>If you use Linux, run the following command on a command-line:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&#39;ActivityStart,ActivityEnd&#39;</span> <span class="token operator">&gt;</span> ~/activity-log.linux.csv
<span class="token function">sudo</span> zcat -f /var/log/syslog* <span class="token punctuation">\\</span><span class="token punctuation">\\</span>
  <span class="token operator">|</span> <span class="token function">cut</span> -c <span class="token number">1</span>-15 <span class="token punctuation">\\</span><span class="token punctuation">\\</span>
  <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token punctuation">\\</span><span class="token punctuation">\\</span>
  <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> <span class="token environment constant">REPLY</span> <span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token assign-left variable">DATE</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span> <span class="token function">date</span> -Iseconds -d <span class="token string">&quot;<span class="token environment constant">$REPLY</span>&quot;</span> <span class="token variable">)</span></span>&quot;</span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$DATE</span>,<span class="token variable">$DATE</span>&quot;</span> <span class="token punctuation">;</span> <span class="token keyword">done</span> <span class="token punctuation">\\</span><span class="token punctuation">\\</span>
  <span class="token operator">&gt;&gt;</span> ~/activity-log.linux.csv
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>A file called <code>activity-log.linux.csv</code> will slowly be populated in your home directory. The program might take a minute or two to run.</p><h1 id="other-sources" tabindex="-1"><a class="header-anchor" href="#other-sources" aria-hidden="true">#</a> Other sources</h1><p>The examples above show how to extract an activity log from some sources. It generally involves <em>extracting</em> the data you want from the source, <em>converting</em> it to an activity log, then <em>analysing</em> it with the diary.</p>`,11),xs=s("If you work out how to extract data from another source, "),Ss={href:"https://github.com/sleepdiary/docs/issues/new?title=Reconstruct+a+diary+from+a+new+source",target:"_blank",rel:"noopener noreferrer"},Ts=s("let us know"),As=s(" so we can add it to this page!");function Es(qs,Is){const i=o("RouterLink"),a=o("ExternalLinkIcon");return c(),l(d,null,[h,m,e("p",null,[y,n(i,{to:"/create/"},{default:p(()=>[k]),_:1}),b]),_,e("p",null,[g,e("a",f,[v,n(a)]),w]),x,e("p",null,[S,T,A,e("a",E,[q,n(a)]),I,e("a",C,[F,n(a)]),L]),$,e("p",null,[P,e("a",D,[O,n(a)]),R,e("a",Y,[G,n(a)]),M]),V,e("p",null,[N,e("a",B,[H,n(a)]),z]),Q,U,W,e("p",null,[Z,e("a",j,[J,n(a)]),K]),e("p",null,[X,e("a",ss,[es,n(a)]),ns]),as,e("p",null,[e("a",ts,[os,n(a)]),is]),rs,e("p",null,[cs,e("a",ls,[ps,n(a)]),ds,e("a",us,[hs,n(a)]),ms,ys,ks]),bs,e("p",null,[_s,e("a",gs,[fs,n(a)]),vs]),ws,e("p",null,[xs,e("a",Ss,[Ts,n(a)]),As])],64)}var Fs=r(u,[["render",Es]]);export{Fs as default};
